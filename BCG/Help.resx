<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>

L'outil d'analyse de portefeuilles de produits du BCG se présente sous la forme d'un graphe représentant:
     x = part de marché relative de chaque produit
     y = taux de croissance de son marché


1.1 OBJECTIF PAR PRODUIT

Faire suivre à chaque produit le chemin inverse de celui des aiguilles d'une montre, 
comme l'infique la Figure 1 et conformément à la théorie du cycle de vie des produits.

1.2 OBJECTIFS AU NIVEAU DU PORTEFEUILLE DE PRODUITS

-Atteindre l'équilibre financier, ce qui correspond graphiquement 
à une répartition équilibrée des produits entre le haut et le bas du graphe; 
la rentabilité des "Vaches à lait" couvrant les besoins des "Dilemmes".
-A long terme, il s'agit d'assurer l'avenir de l'entreprise avec des 
produits jeunes soutenus financièrement par des produits arrivés à maturité.

*cf. Boston Consulting Group (1974)


</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>

BCG permet:
- de visualiser le portefeuille de produits d'une société
- de comparer des portefeuilles de produits de la concurrence
- d'étudier la position d'un produit par rapport aux concurrents

(Chaque analyse****** fait l'objet d'un exemple dans une fonction "test" intégrée au logiciel.

2.1 STRUCTURE

L'architecture du logiciel est la suivante:
- Accueil (1er écran)
- Application (saisies, traitements des donénes, représentation grphique)
- Information


2.2 DONNES UTILISEES

- Nom(s) de(s) société(s)
- Nom(s) produit(s)
- Parts de marché produits en %
- Parts de marché concurrents proncopaux en %
- Taux de croissance marchés en %
- Parts produits dans chiffres d'affaires en %
</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>

3.1 "TESTER" LE LOGICIEL

- Exemple test intégré =&gt; [menu Fichier] =&gt; Tester


3.2 SAISIE DES DONNEES

Dans la fenêtre de l'application
- Saisir chaque donnée dans les cases du tableau (Fig. 3)
- Le curseur se place automatiquement
- Les valeurs décimales doivent être écrites avec UNE VIRGULE OU UN POINT ?????
- Les données doivent être écrites sans le '%'
- SAUTER UNE LIGNE DANS LE TABLEAU POUR SAISIR LES DONNEES D'UNE
           NEW SOCIIIITYYYY


3.3 AFFICHAGE

- Un produit apparait sur le graphe uniquement si toute la ligne de
donnée est remplie:

	- Paremètres d'affichage en %:
		x = log (PDM produit / PDM concurrent principal)
		y = Taux de croissance du marché
		rayon = Part produit dans le chiffre d'affraire

	- L'axe des x est défini en fonction des chiffes d'affaires et 
		de la position des produits dans le graphe
	
	- L'echelle de l'axe des y est adaptée en fonction des extremums
		détectés dans le tableau
	
	- Cliquer sur un cadrants du graphe ouvre une fenêtre explicative 
		du terme correspondant
	</value>
  </data>
</root>